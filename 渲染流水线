渲染流水线

图像绘制的流程成为渲染流水线。这个过程一般是由CPU和GPU共同完成的。

一般的渲染流程分为三个阶段:  Application Stage 应用阶段, Geometry Stage几何阶段,  Rasterizer Stage光栅化阶段。

应用阶段。

应用阶段是在CPU中完成的。主要任务是准备好场景，数据设置好渲染状态， 然后输出渲染图元，为下一阶段做准备。
图元是指渲染的基本图形， 可以是顶点线段，三角面等等。复杂的图形可以通过渲染多个三角面来完成。

应用阶段可分为三个子阶段: 

第一是把数据加载到显存中。所有需要被渲染的数据都需要加载到内存中，而网格和纹理等数据需要加载到显存中。这是因为显卡对于显存的访问速度更快，同时显卡在大多的情况下对内存没有访问权限。

第二是设置渲染状态。比如设置需要的着色器，材质，纹理，光源属性等。

第三是调用Draw Call。Draw Call就是一个命令，它的发起方是CPU, 接收方是GPU。这个命令仅仅会指向一个需要被渲染的图元列表，不会包含任何材质信息，因为这些在第2步已经指定了。当收到一个Draw Call时， GPU就会根据渲染状态和所有输入的顶点数据进行计算，最终输出成屏幕上那些漂亮的像素。

几何阶段。

几何阶段是在GPU上进行的，主要任务是输出屏幕空间的顶点信息。几何阶段用于处理从上一阶段接收到的待绘制物体的几何数据，与每个渲染图元打交道，进行逐点，逐多边形的操作。几何阶段的一个重要任务，就是把顶点坐标转换到屏幕空间中，再交给光栅化器进行处理。通过对输入的图元进行多步处理后，这一阶段会输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等信息。

光栅化阶段。

这一阶段也是在这个GPU上进行的。将会使用上个阶段产生的数据，在屏幕上形成像素，并输出最终的图像。光栅化的主要任务是决定每个渲染图元的哪些像素应该绘制在屏幕上。他需要对上一阶段得到的逐顶点数据如纹理坐标，顶点颜色等，进行插值，然后进行逐像素处理。

上述过程小结一下就是几个阶段从应用阶段得到了图元顶点的相关信息，例如三角形图元得到的是三个顶点和颜色信息。而光栅化阶段是根据这三个顶点计算出这个三角形覆盖了哪些像素，并为这些像素通过差值计算出颜色。
