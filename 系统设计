SOLID设计原则

SOLID设计原则是五个设计原则的缩写。其目的是为了让面向对象设计更容易理解，更灵活，更可维护。

1. 单一责任原则

一个类的改变不该有一个以上的理由。

比方说，一个矩形类既包含了画图方法，又包含了面积计算方法。这就把几何图形相关的功能跟非图形相关的功能揉合在一起了。

再比如说，一个Modem的类既包含了连接相关函数，也包含了数据传输函数。这也是把多种职责揉在一起的例子。

2. 开放封闭原则

软件实体如类，模块，函数等，应该对扩展开放，但对修改封闭。

所谓扩展就是指功能的添加，比如说我们现在有一个服务器，现在想增加新的服务器能力，我们可以在原来的服务器上抽象出一层。新的服务器可以从这个抽象服务器中进行派生。

再一个例子就是图形绘制的功能添加。要增加一个新的图形绘制，我们只需要在抽象图形接口上进行派生就可以。

这个原则有助于尽可能少的修改现有的代码，对于新的功能添加只需要进行扩展添加就可以了。

3. 接口隔离原则。
客户端不应该被迫依赖他们不需要的接口。

我们现在有一个定时器，有一个门，然后我们要写一个定时门的功能。

一种很不好的设计就是门从定时器派生，然后定时门从门派生。

这种设计很不好的原因是门被迫依赖了定时器。因为门跟定时器没有关系。

可以用两种方式来改进:
一种是通过适配性模式把门和定时器的功能连起来。

另一种是使用多重继承，让定时门从门和定时器派生。

4. 李氏替代原则。

基类的指针可以无缝的衔接到具体的派生类对象上。

基于开放封闭原则，我们需要添加抽象类，那么这个抽象类就是我们通常所讲的基类，他的指针指向的是具体派生类的对象。

5. 依赖反转原则。

高级别的模块不应该依赖于低级别的模块。两者都应该依赖于抽象。

抽象不应该依赖于细节，细节应该依赖于抽象。

假定我们现在有三层设计，一个是政策层，一个是机制层，还有一层是工具层。

机制层会调用政策层。工具层会调用机制层。

我们不应该让工具层从机制层派生，然后机制层从政策层开始。

而是由机制层抽象出抽象层，机制层从机制抽象层进行派生。
由工具层抽象出工具抽象层，然后工具层从工具抽象层派生。

以上是对于SOLID五个设计原则的简单分析，我们可以看出SOLID五原则的核心能力是抽象能力。
